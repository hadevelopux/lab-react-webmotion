/**
 * _mixins.scss
 * 
 * Mixins y funciones SASS reutilizables
 * Se enfoca en operaciones matemáticas y patrones complejos
 */

/* Mixin para centrado flex */
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Mixin para posicionamiento fijo a ancho completo */
@mixin fixed-full-width {
  position: fixed;
  left: 0;
  width: 100%;
}

/* Mixin para media queries */
@mixin respond-to($breakpoint) {
  @if $breakpoint == sm {
    @media (min-width: var(--breakpoint-sm)) { @content; }
  }
  @else if $breakpoint == md {
    @media (min-width: var(--breakpoint-md)) { @content; }
  }
  @else if $breakpoint == lg {
    @media (min-width: var(--breakpoint-lg)) { @content; }
  }
  @else if $breakpoint == xl {
    @media (min-width: var(--breakpoint-xl)) { @content; }
  }
}

/* Función para calcular espaciado proporcional */
@function spacing($multiplier) {
  @return calc(var(--spacing-md) * #{$multiplier});
}

/* Mixin para animaciones de entrada */
@mixin fade-in {
  opacity: 0;
  animation: fadeIn var(--transition-slow) forwards;
  
  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }
}

/* Mixin para optimización de rendimiento */
@mixin performance {
  will-change: transform, opacity;
  backface-visibility: hidden;
  transform: translateZ(0);
}

/* Mixin para gradientes */
@mixin gradient($direction, $color1, $color2) {
  background: linear-gradient($direction, $color1, $color2);
}

/* Mixin para sombras */
@mixin shadow($level: 1) {
  @if $level == 1 {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  } @else if $level == 2 {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  } @else if $level == 3 {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  }
}

/**
 * _mixins.scss
 * 
 * Define los mixins reutilizables del proyecto
 * Utiliza variables CSS dentro de SASS
 */

// Layout
@mixin full-size {
  width: 100%;
  height: 100%;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

// Grid
@mixin grid($columns, $gap) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Transitions
@mixin transition-base {
  transition: all var(--transition-base);
}

@mixin transition-fast {
  transition: all var(--transition-fast);
}

@mixin transition-slow {
  transition: all var(--transition-slow);
}

// Typography
@mixin text-base {
  font-size: var(--font-size-base);
  color: var(--color-white);
  line-height: 1.5;
}

@mixin text-lg {
  font-size: var(--font-size-lg);
  color: var(--color-white);
  line-height: 1.5;
}

@mixin text-xl {
  font-size: var(--font-size-xl);
  color: var(--color-white);
  line-height: 1.5;
}

// Hover States
@mixin hover-effect {
  &:hover {
    opacity: var(--color-hover);
    @include transition-base;
  }
}

// Animations
@mixin slide-up {
  animation: slideUp var(--transition-base);
} 